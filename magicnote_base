#! /bin/bash

# main function:
#   \_ Add repository ( normal folder or git repository )
#   \_ Add snippet ( key - value pair )
#   \_ List snippets
#   \_ Show one snippet
#   \_ Modify snippet
#   \_ Search snippet
#   \_ Run snippet

# design
# basic structure:
# .bin
# .data
#   |-- main
#   `-- others(submodules)
#     |-- foo
#     `-- bar

# Data Mode is key:value = N:M

# global vars
OSNAME=`uname`

NOTEDIR=magicnote
MAINNOTE_DIR=$DATATOP/$NOTEDIR/$CURRENT
ACTION_BIN=$BINTOP/magicnote_action.lua

TMPDIR=/tmp
FPREFIX=note_
INDEX_FILENAME=index
TMP_INDEX_FILENAME=magic_index
TMP_NOTE_FILENAME=magic_note
TMP_FINAL_IDX_FILENAME=final_index
TMPFILE=$TMPDIR/$TMP_NOTE_FILENAME
TMPINDEX=$TMPDIR/$TMP_INDEX_FILENAME
FINALINDEX=$TMPDIR/$TMP_FINAL_IDX_FILENAME

function prepare()
{
    ( test -d "$DATATOP/$NOTEDIR" || mkdir -p $DATATOP/$NOTEDIR )
}

function pre_check()
{
    if [ ! -d $MAINNOTE_DIR ]; then
        echo "no source found, please add a note source at first, e.g. magicnote addsource"
        exit
    fi

    # if no index file, create a empty one
    if [ ! -f $MAINNOTE_DIR/$INDEX_FILENAME ]; then
        touch $MAINNOTE_DIR/$INDEX_FILENAME
    fi
}

function check_os()
{
    if [ $OSNAME != "Linux" ] && [ $OSNAME != "Darwin" ]; then
        echo "unsupport os"
        exit
    fi
}

function cal_md5()
{
    local file=$1
    if [ $OSNAME = "Linux" ]; then
        local md5v=`md5sum $file | awk {'print $1'}`
        echo $md5v
    elif [ $OSNAME = "Darwin" ]; then
        local md5v=`md5 -q $file`
        echo $md5v
    else
        echo "unsupport os, now only support Linux and MacOS"
        exit
    fi
}

function check_tagname()
{
    local tagname=$1
    local ret=`echo $tagname | grep -e "[\.\?\*|\\]" | wc -l`
    if [ $ret = "1" ]; then
        echo "invalid tagname, cannot contain '.' '*' '|' '\\' '?'"
        exit 1
    fi
}

function cleanup()
{
    rm -f $TMPFILE $TMPINDEX $FINALINDEX
}

function backup_index()
{
    if [ -f $MAINNOTE_DIR/$INDEX_FILENAME ]; then
        cp $MAINNOTE_DIR/$INDEX_FILENAME $MAINNOTE_DIR/.$INDEX_FILENAME.bak
    fi
}

function revert_index()
{
    if [ -f $MAINNOTE_DIR/.$INDEX_FILENAME.bak ]; then
        cp $MAINNOTE_DIR/.$INDEX_FILENAME.bak $MAINNOTE_DIR/$INDEX_FILENAME
    fi
}

function action_list()
{
    # because list tags is a very complex job, we call a lua script to do this
    local line_limit=$LINE_LIMIT
    while getopts p ARGS
    do
        case $ARGS in
            p)
                line_limit=-1
                ;;
            *)
                exit
                ;;
        esac
    done
    shift $(($OPTIND-1))

    if [ $# = 0 ]; then
        lua $ACTION_BIN $BINTOP list $MAINNOTE_DIR $INDEX_FILENAME $line_limit
        exit
    fi

    while [ -n "$1" ]
    do
        lua $ACTION_BIN $BINTOP list $MAINNOTE_DIR $INDEX_FILENAME $line_limit $1
        shift
    done
}

function action_add_newnote()
{
    # 1. add note
    # 2. add key
    # 3. collect file status and commit into local
    # 4. cleanup tmp files

    # due to vim cannot run in nest shell script, this function still keep here
    $EDITOR $TMPFILE
    if [ ! -f $TMPFILE ]; then
        exit
    fi

    local md5=`cal_md5 $TMPFILE`
    local notefile=$FPREFIX$md5

    if [ -z "$tagname" ]; then
        read -p "input tag name:" tagname;
        check_tagname $tagname
    fi
    #tagname=`echo $tagname | sed -e "s/ /_/g"`
    #echo "tagname=$tagname"

    lua $ACTION_BIN $BINTOP add $TMPDIR $TMP_INDEX_FILENAME $md5 "$tagname" > $FINALINDEX
    mv $TMPFILE $MAINNOTE_DIR/$notefile
}

function action_add_exist()
{
    # the arg format possible "newnote" or "tagname@idx"
    local file_sign=$1
    local file_info=`lua $ACTION_BIN $BINTOP searchkey $TMPDIR $TMP_INDEX_FILENAME $file_sign`
    local md5=`echo $file_info | awk {'print $2'}`

    if [ -n "$md5" ]; then
        # if found md5, that means its format is "tagname@idx"
        echo "existnote $md5"
    else
        # if not found md5, there are two results:
        # 1. its format is "newnote", so the user want to add a real file
        # 2. do not have the item which named tagname@idx
        if [ ! -f $file_sign ]; then
            echo "error :No such file or note:$file_sign, please re-check the path or filename"
            exit 1
        fi

        local md5v=`cal_md5 $file_sign`
        local notefile=$FPREFIX$md5v
        echo "file $md5v $file_sign $MAINNOTE_DIR/$notefile"
    fi
}

function action_add()
{
    # try to find the -tag arg
    local tagname=""
    while getopts t: ARGS
    do
        case $ARGS in
            t)
                tagname="$OPTARG"
                check_tagname $OPTARG
                ;;
            *)
                exit
                ;;
        esac
    done
    shift $(($OPTIND-1))

    # prepare to add
    backup_index
    cp $MAINNOTE_DIR/$INDEX_FILENAME $TMPINDEX

    if [ $# = 0 ]; then
        action_add_newnote $tagname
    else
        local res=`action_add_exist $@`
        local ret=`echo $res | awk {'print $1'}`
        if [ "$ret" = "error" ]; then
            echo "$res"
            exit 1
        fi

        if [ -z "$tagname" ]; then
            read -p "input tag name:" tagname;
            check_tagname $tagname
        fi

        local ret=`echo $res | awk {'print $1'}`
        local md5=`echo $res | awk {'print $2'}`
        local src=`echo $res | awk {'print $3'}`
        local desc=`echo $res | awk {'print $4'}`
        echo "res=$res, tagname=$tagname, md5=$md5, src=$src, desc=$desc"
        lua $ACTION_BIN $BINTOP add $TMPDIR $TMP_INDEX_FILENAME $md5 "$tagname" > $FINALINDEX
        if [ -n "$src" ] && [ -n "$desc" ]; then
            cp $src $desc;
        fi
    fi

    mv $FINALINDEX $MAINNOTE_DIR/$INDEX_FILENAME
    cleanup
}

function action_rm_one()
{
    if [ $# = 0 ]; then
        echo "please input a file stamp, e.g. mn edit ssh@1"
        exit
    fi

    cleanup
    cp $MAINNOTE_DIR/$INDEX_FILENAME $TMPINDEX

    # find which file need to edit
    local file_sign=$1
    local file_info=`lua $ACTION_BIN $BINTOP searchkey $TMPDIR $TMP_INDEX_FILENAME $file_sign`
    local tagname=`echo $file_info | awk {'print $1'}`
    local md5=`echo $file_info | awk {'print $2'}`

    if [ ! -f  $MAINNOTE_DIR/$FPREFIX$md5 ]; then
        echo "Not found a note named $FPREFIX$md5, please check it"
        exit
    fi

    lua $ACTION_BIN $BINTOP rm $MAINNOTE_DIR $INDEX_FILENAME $file_sign > $FINALINDEX
    mv $FINALINDEX $MAINNOTE_DIR/$INDEX_FILENAME
    cleanup
}

function action_rm()
{
    if [ $# = 0 ]; then
        echo "please input a file stamp, e.g. mn edit ssh@1"
        exit
    fi

    backup_index
    while [ -n "$1" ]
    do
        action_rm_one $1
        shift
    done
}

function action_edit_one()
{
    cleanup
    # copy index file to tmp dir
    cp $MAINNOTE_DIR/$INDEX_FILENAME $TMPINDEX

    # find which file need to edit
    local file_sign=$1
    local file_info=`lua $ACTION_BIN $BINTOP searchkey $TMPDIR $TMP_INDEX_FILENAME $file_sign`
    local tagname=`echo $file_info | awk {'print $1'}`
    local md5=`echo $file_info | awk {'print $2'}`

    if [ ! -f $MAINNOTE_DIR/$FPREFIX$md5 ]; then
        echo "Not found a note named $FPREFIX$md5, please check it"
        exit
    fi

    cp $MAINNOTE_DIR/$FPREFIX$md5 $TMPFILE
    $EDITOR $TMPFILE

    local new_md5=`cal_md5 $TMPFILE`
    if [ $new_md5 != $md5 ]; then
        lua $ACTION_BIN $BINTOP updatemd5 $TMPDIR $TMP_INDEX_FILENAME $tagname $md5 $new_md5 > $FINALINDEX;
        # all done, move files back, replace the old one
        mv $TMPFILE $MAINNOTE_DIR/$FPREFIX$new_md5;
        mv $FINALINDEX $MAINNOTE_DIR/$INDEX_FILENAME;
    fi

    cleanup
}

function action_edit()
{
    if [ $# = 0 ]; then
        echo "please input a file stamp, e.g. mn edit ssh@1"
        exit
    fi

    backup_index
    while [ -n "$1" ]
    do
        action_edit_one $1
        shift
    done
}

function action_find()
{
    local line_limit=$LINE_LIMIT
    while getopts p ARGS
    do
        case $ARGS in
            p)
                line_limit=-1
                ;;
            *)
                exit
                ;;
        esac
    done
    echo "shift $(($OPTIND-1))"
    shift $(($OPTIND-1))

    if [ $# = 0 ]; then
        echo "please input a key for this finding, e.g. find test"
        exit
    fi

    lua $ACTION_BIN $BINTOP find $MAINNOTE_DIR $INDEX_FILENAME $line_limit $@
}

function action_run()
{
    if [ $# = 0 ]; then
        echo "please input a key for this running, e.g. run ssh@1[#1]"
        exit
    fi

    local file_sign=$1
    local file_info=`lua $ACTION_BIN $BINTOP searchkey $MAINNOTE_DIR $INDEX_FILENAME $file_sign`
    local tagname=`echo $file_info | awk {'print $1'}`
    local md5=`echo $file_info | awk {'print $2'}`

    if [ ! -f $MAINNOTE_DIR/$FPREFIX$md5 ]; then
        echo "Not found a note named $FPREFIX$md5, please check it"
        exit
    fi

    lua $ACTION_BIN $BINTOP getnote $MAINNOTE_DIR $INDEX_FILENAME $1 > $TMPDIR/tmp_note.sh
    sh -v $TMPDIR/tmp_note.sh
}

function dump_unuseful_list()
{(
    cd $MAINNOTE_DIR;
    local filelist=`ls ./ | grep $FPREFIX`;
    #local new_filelist=`echo $filelist | sed -e "s/ /,/g"`;
    lua $ACTION_BIN $BINTOP gc $MAINNOTE_DIR $INDEX_FILENAME "$filelist";
)}

function action_addsource()
{
    #if [ $# != 1 ]; then
    #    echo "need source address, for example: addsource main"
    #    exit
    #fi

    local repository_name=$1
    mkdir -p $MAINNOTE_DIR
    cd $MAINNOTE_DIR && touch $INDEX_FILENAME
}

function action_showtags()
{
    local show_detail
    while getopts v ARGS
    do
        case $ARGS in
            v)
                show_detail=true
                ;;
            *)
                exit
                ;;
        esac
    done
    shift $(($OPTIND-1))
    lua $ACTION_BIN $BINTOP showtags $MAINNOTE_DIR $INDEX_FILENAME $show_detail
}

######## main #########

check_os
# check first
prepare
